
import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { SendHorizontal, User, Sparkles, Upload, Link, Clock, AlertCircle, CheckCircle, PlusCircle, Info, Play } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Progress } from '@/components/ui/progress';
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger 
} from '@/components/ui/dropdown-menu';

type Message = {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
  status?: 'sending' | 'error' | 'success';
  attachments?: { type: 'file' | 'link'; name: string; url?: string }[];
};

type WizardStep = {
  id: string;
  title: string;
  question: string;
  completed: boolean;
};

const ResumeAIWizard = () => {
  const { toast } = useToast();
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ —Å –Ω—É–ª—è.\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ, –∑–∞–¥–∞–≤–∞—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –Ω–∞–≤—ã–∫–∞—Ö.\n\nüìé –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å:\n‚Ä¢ –§–∞–π–ª—ã (PDF, DOC, DOCX)\n‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ LinkedIn\n‚Ä¢ –õ—é–±—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ\" –Ω–∏–∂–µ, –∏ –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ—à–∞–≥–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ!",
      timestamp: new Date(),
    }
  ]);
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [currentStep, setCurrentStep] = useState(-1); // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [progressValue, setProgressValue] = useState(0);
  const [wizardStarted, setWizardStarted] = useState(false);
  const messageEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const wizardSteps: WizardStep[] = [
    {
      id: 'personal',
      title: '–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      question: "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ:\n‚Ä¢ –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è\n‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, email)\n‚Ä¢ –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
      completed: false,
    },
    {
      id: 'summary',
      title: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ',
      question: "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∫–∞–∫ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ:\n‚Ä¢ –ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?\n‚Ä¢ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ—Å—å?\n‚Ä¢ –ö–∞–∫–∏–µ –≤–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?\n‚Ä¢ –ö–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –∏—â–µ—Ç–µ?",
      completed: false,
    },
    {
      id: 'experience',
      title: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
      question: "–ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã:\n‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ–ª–∂–Ω–æ—Å—Ç—å)\n‚Ä¢ –ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã\n‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã (—Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–µ–∫—Ç—ã)",
      completed: false,
    },
    {
      id: 'education',
      title: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      question: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏:\n‚Ä¢ –£—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è\n‚Ä¢ –ì–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
      completed: false,
    },
    {
      id: 'skills',
      title: '–ù–∞–≤—ã–∫–∏',
      question: "–ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –≤—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ:\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏\n‚Ä¢ –Ø–∑—ã–∫–∏ (—É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è)\n‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      completed: false,
    },
    {
      id: 'complete',
      title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ',
      question: "–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ. –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –µ–≥–æ —Å–µ–π—á–∞—Å?",
      completed: false,
    }
  ];

  const suggestions = [
    "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞, –∂–∏–≤—É –≤ –ú–æ—Å–∫–≤–µ, –∏—â—É —Ä–∞–±–æ—Ç—É Frontend Developer",
    "–†–∞–±–æ—Ç–∞–ª 3 –≥–æ–¥–∞ –≤ IT-–∫–æ–º–ø–∞–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ React",
    "–ó–∞–∫–æ–Ω—á–∏–ª –ú–ì–£ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –≤ 2020 –≥–æ–¥—É",
    "–í–ª–∞–¥–µ—é JavaScript, React, TypeScript, –∑–Ω–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ B2"
  ];

  useEffect(() => {
    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    if (wizardStarted && currentStep >= 0) {
      setProgressValue(((currentStep + 1) / wizardSteps.length) * 100);
    }
  }, [currentStep, wizardStarted]);

  const simulateAIResponse = (content: string, delay = 500) => {
    setTimeout(() => {
      setMessages(prev => [
        ...prev,
        {
          id: Date.now().toString(),
          role: 'assistant',
          content,
          timestamp: new Date(),
          status: 'success' as const
        }
      ]);
      setIsGenerating(false);
    }, delay);
  };

  const handleStartWizard = () => {
    if (!wizardStarted) {
      setWizardStarted(true);
      setCurrentStep(0);
      setIsGenerating(true);
      
      simulateAIResponse(wizardSteps[0].question, 1000);
    }
  };

  const handleSendMessage = () => {
    if (!input.trim()) return;
    
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
      status: 'success' as const
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsGenerating(true);
    setShowSuggestions(false);
    
    const nextStep = currentStep + 1;
    
    if (nextStep < wizardSteps.length) {
      setTimeout(() => {
        simulateAIResponse(wizardSteps[nextStep].question);
        setCurrentStep(nextStep);
      }, 1000);
    } else {
      setTimeout(() => {
        simulateAIResponse("üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –Ø —Å–æ–∑–¥–∞–ª –≤–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É 'Editor' —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Å—Ä–∞–∑—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ.\n\n‚ú® –†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ —Å —É—á–µ—Ç–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ATS-—Å–∏—Å—Ç–µ–º!", 1500);
        
        toast({
          title: "–†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ!",
          description: "–í–∞—à–µ AI-—Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.",
        });
        
        // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        setTimeout(() => {
          setWizardStarted(false);
          setCurrentStep(-1);
          setProgressValue(0);
        }, 3000);
      }, 1500);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const fileMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: `–ü—Ä–∏–∫—Ä–µ–ø–ª—è—é —Ñ–∞–π–ª ${file.name} –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`,
      timestamp: new Date(),
      attachments: [{ type: 'file', name: file.name }]
    };

    setMessages(prev => [...prev, fileMessage]);
    setIsGenerating(true);

    setTimeout(() => {
      simulateAIResponse(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∞–π–ª ${file.name}! –Ø –∏–∑–≤–ª–µ–∫ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É—á—Ç—É –µ—ë –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.`);
    }, 1500);
  };

  const handleUseSuggestion = (suggestion: string) => {
    setInput(suggestion);
    setShowSuggestions(false);
  };

  return (
    <div className="flex flex-col h-full animate-fade-in">
      <Card className="flex-1 flex flex-col overflow-hidden">
        <CardHeader className="bg-muted py-3">
          <CardTitle className="text-lg flex items-center justify-between">
            <div className="flex items-center">
              <Sparkles className="h-5 w-5 mr-2 text-primary" />
              AI –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
            </div>
            <div className="flex items-center space-x-2">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                      <Info className="h-4 w-4" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>–°–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã</TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </CardTitle>
        </CardHeader>
        
        <ScrollArea className="flex-1 p-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div 
                key={message.id} 
                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div 
                  className={`
                    max-w-[85%] rounded-lg px-4 py-3
                    ${message.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted border'}
                  `}
                >
                  {message.role === 'user' && (
                    <div className="flex items-center mb-1">
                      <User className="h-3 w-3 mr-1" />
                      <span className="text-xs font-medium">–í—ã</span>
                    </div>
                  )}
                  
                  {message.role === 'assistant' && (
                    <div className="flex items-center mb-1">
                      <Sparkles className="h-3 w-3 mr-1" />
                      <span className="text-xs font-medium">AI –ü–æ–º–æ—â–Ω–∏–∫</span>
                    </div>
                  )}
                  
                  <p className="text-sm whitespace-pre-wrap leading-relaxed">{message.content}</p>
                  
                  {message.attachments?.length > 0 && (
                    <div className="mt-2 space-y-1">
                      {message.attachments.map((attachment, i) => (
                        <div key={i} className="flex items-center text-xs p-2 bg-background/50 rounded">
                          <Upload className="h-3 w-3 mr-1" />
                          <span>{attachment.name}</span>
                        </div>
                      ))}
                    </div>
                  )}
                  
                  <div className="text-xs opacity-70 text-right mt-2 flex items-center justify-end">
                    {message.status === 'success' && message.role === 'assistant' && (
                      <CheckCircle className="h-3 w-3 mr-1 text-green-500" />
                    )}
                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
              </div>
            ))}
            
            {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ" */}
            {!wizardStarted && messages.length === 1 && (
              <div className="flex justify-center mt-4">
                <Button 
                  onClick={handleStartWizard}
                  className="bg-primary text-primary-foreground hover:bg-primary/90 px-6 py-3"
                  size="lg"
                >
                  <Play className="h-4 w-4 mr-2" />
                  –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
                </Button>
              </div>
            )}
            
            {isGenerating && (
              <div className="flex justify-start">
                <div className="max-w-[85%] rounded-lg px-4 py-3 bg-muted border">
                  <div className="flex items-center gap-1">
                    <div className="h-1.5 w-1.5 bg-current rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                    <div className="h-1.5 w-1.5 bg-current rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                    <div className="h-1.5 w-1.5 bg-current rounded-full animate-bounce"></div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messageEndRef} />
          </div>
        </ScrollArea>
        
        {showSuggestions && wizardStarted && (
          <div className="px-4 py-2 border-t border-border">
            <p className="text-xs font-medium mb-2">–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:</p>
            <div className="flex flex-wrap gap-2">
              {suggestions.map((suggestion, index) => (
                <Button 
                  key={index} 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleUseSuggestion(suggestion)}
                  className="text-xs"
                >
                  {suggestion.length > 40 ? `${suggestion.substring(0, 40)}...` : suggestion}
                </Button>
              ))}
            </div>
          </div>
        )}
        
        <CardFooter className="border-t p-4">
          <div className="w-full space-y-3">
            {wizardStarted && (
              <form 
                className="flex w-full items-center space-x-2"
                onSubmit={(e) => {
                  e.preventDefault();
                  handleSendMessage();
                }}
              >
                <input 
                  type="file" 
                  ref={fileInputRef} 
                  className="hidden" 
                  onChange={handleFileUpload}
                  accept=".pdf,.doc,.docx,.txt,.jpg,.png"
                />
                <Button 
                  type="button" 
                  size="icon"
                  variant="outline"
                  onClick={() => fileInputRef.current?.click()}
                  disabled={isGenerating}
                  className="flex-shrink-0"
                >
                  <Upload className="h-4 w-4" />
                  <span className="sr-only">–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª</span>
                </Button>
                
                <Textarea 
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                  className="flex-1 min-h-12"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyDown={handleKeyDown}
                  disabled={isGenerating}
                  rows={1}
                />
                
                <Button 
                  type="button"
                  size="icon"
                  variant="ghost"
                  onClick={() => setShowSuggestions(!showSuggestions)}
                  disabled={isGenerating}
                  className="flex-shrink-0"
                >
                  <PlusCircle className="h-4 w-4" />
                  <span className="sr-only">–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã</span>
                </Button>
                
                <Button 
                  type="submit" 
                  size="icon"
                  disabled={isGenerating || !input.trim()}
                  className="flex-shrink-0"
                >
                  <SendHorizontal className="h-4 w-4" />
                  <span className="sr-only">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
                </Button>
              </form>
            )}
            
            {wizardStarted && (
              <div className="w-full">
                <div className="flex justify-between text-xs text-muted-foreground mb-1">
                  <span>–®–∞–≥ {currentStep + 1} –∏–∑ {wizardSteps.length} ‚Ä¢ {wizardSteps[currentStep]?.title}</span>
                  <span>{Math.round(progressValue)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                </div>
                <Progress value={progressValue} className="h-2" />
              </div>
            )}
          </div>
        </CardFooter>
      </Card>
    </div>
  );
};

export default ResumeAIWizard;

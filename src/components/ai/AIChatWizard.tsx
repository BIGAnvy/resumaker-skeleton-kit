
import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { SendHorizontal, User, Bot, Upload, Link, Clock, CheckCircle, PlusCircle, Play, FileText, Sparkles } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Progress } from '@/components/ui/progress';

type Message = {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
  status?: 'sending' | 'error' | 'success';
  attachments?: { type: 'file' | 'link'; name: string; url?: string }[];
};

type WizardStep = {
  id: string;
  title: string;
  question: string;
  completed: boolean;
};

const AIChatWizard = () => {
  const { toast } = useToast();
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ.\n\n–Ø —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ, –ø–æ—à–∞–≥–æ–≤–æ —Å–æ–±–∏—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ, –Ω–∞–≤—ã–∫–∞—Ö –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö.\n\n‚ú® –ß—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ ATS-—Å–∏—Å—Ç–µ–º—ã\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üöÄ",
      timestamp: new Date(),
    }
  ]);
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [currentStep, setCurrentStep] = useState(-1);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [progressValue, setProgressValue] = useState(0);
  const [wizardStarted, setWizardStarted] = useState(false);
  const messageEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const wizardSteps: WizardStep[] = [
    {
      id: 'personal',
      title: '–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      question: "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ:\n\nüë§ –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è\nüìß Email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω\nüåç –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\nüíº –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
      completed: false,
    },
    {
      id: 'summary',
      title: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ',
      question: "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ –≤–∞—à–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ:\n\nüéØ –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è\n‚≠ê –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\nüèÜ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏\nüìà –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—Å –æ—Å–æ–±–µ–Ω–Ω—ã–º?",
      completed: false,
    },
    {
      id: 'experience',
      title: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
      question: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—É—Ç–∏:\n\nüè¢ –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\nüìÖ –î–∞—Ç—ã —Ä–∞–±–æ—Ç—ã\nüéØ –ö–ª—é—á–µ–≤—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\nüìä –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã",
      completed: false,
    },
    {
      id: 'education',
      title: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      question: "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏:\n\nüéì –£—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è\nüìö –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\nüìÖ –ì–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è\nüèÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫—É—Ä—Å—ã",
      completed: false,
    },
    {
      id: 'skills',
      title: '–ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏',
      question: "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö - –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏:\n\nüõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏\nüí° Soft skills\nüåê –Ø–∑—ã–∫–∏ (—É—Ä–æ–≤–µ–Ω—å)\n‚ö° –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      completed: false,
    },
    {
      id: 'complete',
      title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ',
      question: "üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n–¢–µ–ø–µ—Ä—å —è —Å–æ–∑–¥–∞–º –≤–∞—à–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞.\n\n–ì–æ—Ç–æ–≤—ã –∫ –º–∞–≥–∏–∏? ‚ú®",
      completed: false,
    }
  ];

  const suggestions = [
    "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞, frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ú–æ—Å–∫–≤—ã",
    "5 –ª–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    "–í–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –Ø–Ω–¥–µ–∫—Å–µ 2020-2023",
    "–í–ª–∞–¥–µ—é TypeScript, Node.js, –∑–Ω–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π B2"
  ];

  useEffect(() => {
    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    if (wizardStarted && currentStep >= 0) {
      setProgressValue(((currentStep + 1) / wizardSteps.length) * 100);
    }
  }, [currentStep, wizardStarted]);

  const simulateAIResponse = (content: string, delay = 1000) => {
    setTimeout(() => {
      setMessages(prev => [
        ...prev,
        {
          id: Date.now().toString(),
          role: 'assistant',
          content,
          timestamp: new Date(),
          status: 'success' as const
        }
      ]);
      setIsGenerating(false);
    }, delay);
  };

  const handleStartWizard = () => {
    if (!wizardStarted) {
      setWizardStarted(true);
      setCurrentStep(0);
      setIsGenerating(true);
      
      simulateAIResponse(wizardSteps[0].question, 1500);
    }
  };

  const handleSendMessage = () => {
    if (!input.trim()) return;
    
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
      status: 'success' as const
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsGenerating(true);
    setShowSuggestions(false);
    
    const nextStep = currentStep + 1;
    
    if (nextStep < wizardSteps.length) {
      setTimeout(() => {
        simulateAIResponse(wizardSteps[nextStep].question);
        setCurrentStep(nextStep);
      }, 1200);
    } else {
      setTimeout(() => {
        simulateAIResponse("üéä –í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ!\n\n–Ø —Å–æ–∑–¥–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã. –†–µ–∑—é–º–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç:\n\n‚úÖ ATS-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Ä–∞—Å–ª–∏\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", 2000);
        
        toast({
          title: "üéâ –†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ!",
          description: "–í–∞—à–µ AI-—Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.",
        });
        
        setTimeout(() => {
          setWizardStarted(false);
          setCurrentStep(-1);
          setProgressValue(0);
        }, 4000);
      }, 1500);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const fileMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: `üìé –ü—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª: ${file.name}`,
      timestamp: new Date(),
      attachments: [{ type: 'file', name: file.name }]
    };

    setMessages(prev => [...prev, fileMessage]);
    setIsGenerating(true);

    setTimeout(() => {
      simulateAIResponse(`‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª "${file.name}"...\n\n–ò–∑–≤–ª–µ–∫ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–µ–∑—é–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∏–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!`);
    }, 1800);
  };

  const handleUseSuggestion = (suggestion: string) => {
    setInput(suggestion);
    setShowSuggestions(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-4xl">
        <Card className="border-0 bg-slate-900/90 backdrop-blur-xl shadow-2xl">
          <CardHeader className="border-b border-slate-700/50 bg-gradient-to-r from-purple-900/20 to-blue-900/20">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="p-2 rounded-xl bg-gradient-to-br from-purple-500 to-blue-500">
                  <Bot className="h-6 w-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">AI Resume Creator</h1>
                  <p className="text-sm text-slate-400">–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {wizardStarted && (
                  <div className="text-xs text-slate-400 bg-slate-800/50 px-3 py-1 rounded-full border border-slate-700">
                    –®–∞–≥ {currentStep + 1}/{wizardSteps.length}
                  </div>
                )}
                <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse"></div>
              </div>
            </div>
            {wizardStarted && (
              <div className="mt-4">
                <div className="flex justify-between text-xs text-slate-400 mb-2">
                  <span>{wizardSteps[currentStep]?.title}</span>
                  <span>{Math.round(progressValue)}%</span>
                </div>
                <Progress value={progressValue} className="h-1 bg-slate-800">
                  <div 
                    className="h-full bg-gradient-to-r from-purple-500 to-blue-500 transition-all duration-500 ease-out rounded-full"
                    style={{ width: `${progressValue}%` }}
                  />
                </Progress>
              </div>
            )}
          </CardHeader>
          
          <ScrollArea className="h-96 p-6">
            <div className="space-y-6">
              {messages.map((message) => (
                <div 
                  key={message.id} 
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div 
                    className={`
                      max-w-[80%] rounded-2xl px-4 py-3 backdrop-blur-sm
                      ${message.role === 'user' 
                        ? 'bg-gradient-to-br from-purple-600 to-blue-600 text-white ml-4' 
                        : 'bg-slate-800/80 text-slate-100 border border-slate-700/50 mr-4'
                      }
                    `}
                  >
                    <div className="flex items-center mb-2">
                      {message.role === 'user' ? (
                        <User className="h-4 w-4 mr-2" />
                      ) : (
                        <Bot className="h-4 w-4 mr-2 text-purple-400" />
                      )}
                      <span className="text-xs font-medium opacity-80">
                        {message.role === 'user' ? '–í—ã' : 'AI Assistant'}
                      </span>
                    </div>
                    
                    <p className="text-sm whitespace-pre-wrap leading-relaxed">{message.content}</p>
                    
                    {message.attachments?.length > 0 && (
                      <div className="mt-3 p-2 rounded-lg bg-black/20 border border-slate-600/30">
                        {message.attachments.map((attachment, i) => (
                          <div key={i} className="flex items-center text-xs">
                            <FileText className="h-3 w-3 mr-2" />
                            <span>{attachment.name}</span>
                          </div>
                        ))}
                      </div>
                    )}
                    
                    <div className="text-xs opacity-50 text-right mt-2">
                      {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                  </div>
                </div>
              ))}
              
              {!wizardStarted && (
                <div className="flex justify-center mt-8">
                  <Button 
                    onClick={handleStartWizard}
                    className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-4 text-lg rounded-2xl shadow-xl transform transition-all duration-200 hover:scale-105"
                    size="lg"
                  >
                    <Play className="h-5 w-5 mr-3" />
                    –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
                    <Sparkles className="h-5 w-5 ml-3" />
                  </Button>
                </div>
              )}
              
              {isGenerating && (
                <div className="flex justify-start">
                  <div className="max-w-[80%] rounded-2xl px-4 py-3 bg-slate-800/80 border border-slate-700/50 mr-4">
                    <div className="flex items-center gap-1">
                      <Bot className="h-4 w-4 mr-2 text-purple-400" />
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                        <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                        <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messageEndRef} />
            </div>
          </ScrollArea>
          
          {showSuggestions && wizardStarted && (
            <div className="px-6 py-3 border-t border-slate-700/50 bg-slate-800/30">
              <p className="text-xs font-medium text-slate-400 mb-3">üí° –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:</p>
              <div className="flex flex-wrap gap-2">
                {suggestions.map((suggestion, index) => (
                  <Button 
                    key={index} 
                    variant="outline" 
                    size="sm"
                    onClick={() => handleUseSuggestion(suggestion)}
                    className="text-xs bg-slate-800/50 border-slate-600 text-slate-300 hover:bg-slate-700 hover:border-slate-500"
                  >
                    {suggestion.length > 40 ? `${suggestion.substring(0, 40)}...` : suggestion}
                  </Button>
                ))}
              </div>
            </div>
          )}
          
          {wizardStarted && (
            <CardFooter className="border-t border-slate-700/50 bg-slate-800/20 p-6">
              <form 
                className="flex w-full items-end space-x-3"
                onSubmit={(e) => {
                  e.preventDefault();
                  handleSendMessage();
                }}
              >
                <input 
                  type="file" 
                  ref={fileInputRef} 
                  className="hidden" 
                  onChange={handleFileUpload}
                  accept=".pdf,.doc,.docx,.txt,.jpg,.png"
                />
                
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button 
                        type="button" 
                        size="icon"
                        variant="outline"
                        onClick={() => fileInputRef.current?.click()}
                        disabled={isGenerating}
                        className="bg-slate-800/50 border-slate-600 hover:bg-slate-700 text-slate-300"
                      >
                        <Upload className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª</TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                
                <div className="flex-1 relative">
                  <Textarea 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                    className="bg-slate-800/50 border-slate-600 text-slate-100 placeholder-slate-400 focus:border-purple-500 focus:ring-purple-500/20 resize-none"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={handleKeyDown}
                    disabled={isGenerating}
                    rows={1}
                  />
                </div>
                
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button 
                        type="button"
                        size="icon"
                        variant="ghost"
                        onClick={() => setShowSuggestions(!showSuggestions)}
                        disabled={isGenerating}
                        className="text-slate-400 hover:text-slate-200 hover:bg-slate-800"
                      >
                        <PlusCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã</TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                
                <Button 
                  type="submit" 
                  size="icon"
                  disabled={isGenerating || !input.trim()}
                  className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white"
                >
                  <SendHorizontal className="h-4 w-4" />
                </Button>
              </form>
            </CardFooter>
          )}
        </Card>
      </div>
    </div>
  );
};

export default AIChatWizard;
